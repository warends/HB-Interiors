'use strict';

var app = angular.module('hb-interiors', ['home', 'services', 'common', 'ed.controller', 'contact.controller', 'about.controller', 'questionaire.factory', 'ui.router', 'ngScrollReveal']);

app.config(['$locationProvider', '$stateProvider', '$urlRouterProvider', function ($locationProvider, $stateProvider, $urlRouterProvider) {

    $urlRouterProvider.otherwise('/');
    $locationProvider.html5Mode(true);

    $stateProvider.state('home', {
        url: '/',
        templateUrl: '/partials/home/home',
        controller: 'HomeController'
    }).state('services', {
        url: '/services',
        templateUrl: '/partials/services/services',
        controller: 'ServiceController'
    }).state('e-design', {
        url: '/e-design',
        templateUrl: '/partials/ed/ed',
        controller: 'EDesignController'
    }).state('about', {
        url: '/about',
        templateUrl: '/partials/about/about',
        controller: 'AboutController'
    }).state('contact', {
        url: '/contact',
        templateUrl: '/partials/contact/contact',
        controller: 'ContactController'
    }).state('services.detail', {
        url: '/:slug',
        templateUrl: '/partials/services/services-detail',
        controller: 'SelectedServiceController'
    });
}]);

app.run(['$rootScope', '$location', function ($rootScope, $location) {

    // $rootScope.$on('$routeChangeError', function(evt, current, previous, rejection) {
    //     if(rejection === 'not authorized') {
    //       $location.path('/');
    //     }
    // });

    $rootScope.$on("$stateChangeSuccess", function (event, currentRoute, previousRoute) {});
}]);
'use strict';

angular.module('about.controller', []).controller('AboutController', ['$scope', function ($scope) {

  $scope.isActive = false;
  $scope.minusSign = false;
  $scope.expandBio = function () {
    $scope.minusSign = !$scope.minusSign;
    $scope.isActive = !$scope.isActive;
  };
}]);
'use strict';

angular.module('common', ['common.modal', 'common.inview', 'common.meta']);
'use strict';

angular.module('common.inview', []).directive('inView', ['$window', function ($window) {
    return {
        restrict: 'A',
        scope: {
            viewObj: '='
        },
        link: function link(scope, element, attrs) {
            angular.element($window).bind('scroll', function () {
                var $el = element[0],
                    pos = $el.getBoundingClientRect();
                //check to see if active class, if not, start animations with js and define selectors
                if (pos.top + scope.viewObj.offset < $window.scrollY) {
                    scope.viewObj.visible = true;
                    console.log('in view :' + scope.viewObj.visible);
                } else {
                    scope.viewObj.visible = false;
                }
                scope.$apply();
            });
        }

    };
}]);
'use strict';

angular.module('common.meta', []).factory('Meta', function () {
  var _title = 'Hayley Bagwell Interior Design, Seattle, WA';
  var desc = 'Super DERRR';
  return {
    title: function title() {
      return _title;
    },
    setTitle: function setTitle(newTitle) {
      _title = newTitle;
    },
    description: function description() {
      return desc;
    },
    setDesc: function setDesc(newDesc) {
      desc = newDesc;
    }
  };
}).controller('MetaController', ['$scope', 'Meta', function ($scope, Meta) {
  $scope.Meta = Meta;
  $scope.metaDesc = Meta;
}]);
'use strict';

angular.module('common.modal', []).directive('globalModal', function () {

  return {
    restrict: 'E',
    scope: {
      show: '='
    },
    replace: true,
    transclude: true,
    link: function link(scope, element, attrs) {
      scope.dialogStyle = {};
      if (attrs.width) scope.dialogStyle.width = attrs.width;
      if (attrs.height) scope.dialogStyle.height = attrs.height;

      scope.hideModal = function () {
        scope.show = false;
      };
    },
    templateUrl: '/partials/common/modal'
  };
});
'use strict';

angular.module('ed.controller', []).controller('EDesignController', ['$scope', '$http', 'QFactory', function ($scope, $http, QFactory) {
    window.scrollTo(0, 0);

    $scope.qShow = false;
    $scope.toggleQForm = function () {
        $scope.qShow = !$scope.qShow;
    };

    $scope.formData = {};
    $scope.questions = QFactory.list();

    $scope.submitQuestionaire = function () {
        console.log($scope.formData);
        $http.post('/questionaire-form', $scope.formData).then(function (response) {
            console.log(response.data);
        }, function (err) {
            console.log('There was a problem submitting your form ' + err);
        });
    };
}]);
'use strict';

angular.module('questionaire.factory', []).factory('QFactory', function () {

    var questions = [{
        id: 'q1',
        type: 'radio',
        question: 'Which space would you like designed first?',
        text: true,
        cols: 'col-sm-2',
        answers: ['Living', 'Bedroom', 'Dining', 'Bath', 'Kitchen', 'Other']
    }, {
        id: 'q2',
        type: 'radio',
        question: 'Which image(s) are you drawn to?',
        text: false,
        cols: 'col-sm-2',
        answers: ['img1', 'img2', 'img3', 'img4', 'img5', 'img6']
    }, {
        id: 'q3',
        type: 'checkbox',
        question: 'Where would you shop for furniture?',
        text: true,
        cols: 'col-sm-2',
        answers: ['Ikea', 'Pier 1', 'West Elm', 'Crate and Barrel', 'CB2', 'Restoration Hardware']
    }, {
        id: 'q4',
        type: 'checkbox',
        question: 'What colors would you like to see in the design',
        text: false,
        cols: 'col-sm-2',
        answers: ['Black', 'Grey', 'Red', 'Orange', 'Yellow', 'Lime', 'Green', 'Aqua', 'Turqious', 'Slate', 'Blue', 'Purple', 'Pink', 'Brown', 'Cream', 'White']
    }, {
        id: 'q5',
        type: 'checkbox',
        question: 'Select which colors you would NOT want to see',
        text: false,
        cols: 'col-sm-2',
        answers: ['Black', 'Grey', 'Red', 'Orange', 'Yellow', 'Lime', 'Green', 'Aqua', 'Turqious', 'Slate', 'Blue', 'Purple', 'Pink', 'Brown', 'Cream', 'White']
    }, {
        id: 'q6',
        type: 'radio',
        question: 'HOW MUCH MONEY ARE YOU BUDGETING FOR YOUR PROJECT AFTER THE DESIGN FEE, WHICH BEGINS AROUND $1,500 PER SPACE?',
        text: false,
        cols: 'col-sm-2',
        answers: ['1-2', '2-5', '5-10', '10-15', '15-25', '25up']
    }];

    return {
        list: function list() {
            return questions;
        }
    };
});
'use strict';

angular.module('contact.controller', []).controller('ContactController', ['$scope', '$http', function ($scope, $http) {

  $scope.form = {};

  $scope.sendMail = function () {
    var data = {
      contactName: this.contactName,
      contactCompany: this.contactCompany,
      contactEmail: this.contactEmail,
      contactMessage: this.contactMessage
    };

    $http.post('/contact-form', data).then(function (message, status, headers, config) {
      notifier.notify('Thank you for your message ' + message.data.contactName);
      $scope.form.contactForm.$setPristine();
      $scope.form.contactForm.$setUntouched();
    }, function (message, status, headers, config) {
      notifier.notify('There was an error processing your request. Please try again');
    });
    this.contactName = null;
    this.contactCompany = null;
    this.contactEmail = null;
    this.contactMessage = null;
  };
}]);
'use strict';

angular.module('banner.dir', []).directive('pageBanner', function () {
  return {
    restrict: 'E',
    templateUrl: '/partials/home/banner',
    replace: true,
    scope: { bgImage: '@' }
  };
});
'use strict';

angular.module('box.height.dir', []).directive('boxHeight', ['$window', '$timeout', function ($window, $timeout) {
  return {
    restrict: 'A',
    link: function link(scope, elem, attrs) {
      $timeout(function () {
        scope.newHeight = elem[0].offsetHeight;
      }, 500);
      angular.element($window).bind('resize', function () {
        scope.$apply(function () {
          scope.newHeight = elem[0].offsetHeight;
        });
      });
    }
  };
}]);

angular.module('target.height.dir', []).directive('targetHeight', function () {
  return {
    restrict: 'A',
    link: function link(scope, elem, attrs) {
      scope.$watch('newHeight', function (newV, oldV) {
        //console.log('old value ' + oldV, 'new value ' + newV);
        elem.attr('style', 'height: ' + newV + 'px');
      });
    }
  };
});
'use strict';

angular.module('home.controller', []).controller('HomeController', ['$scope', 'ServiceFactory', function ($scope, ServiceFactory) {

  $scope.services = ServiceFactory.list();

  $scope.welcome = {
    visible: false,
    offset: -200
  };

  $scope.options = {
    origin: 'left',
    distance: '150px',
    easing: 'ease-in-out',
    delay: 30,
    scale: 1,
    duration: 1000,
    // reset: true,
    // afterReveal: function (domEl) {
    //   document.getElementById("gallery").style.visibility = "visible";
    // },
    sequence: {
      selector: '.col-sm-5',
      interval: 300
    }
  };
}]);
'use strict';

angular.module('home', ['home.controller', 'box.height.dir', 'target.height.dir', 'banner.dir']);
'use strict';

angular.module('service.controller', []).controller('ServiceController', ['$scope', '$stateParams', 'ServiceFactory', function ($scope, $stateParams, ServiceFactory) {
  $scope.services = ServiceFactory.list();
}]);

angular.module('service.detail.controller', []).controller('SelectedServiceController', ['$scope', '$stateParams', 'ServiceFactory', function ($scope, $stateParams, ServiceFactory) {
  $scope.selectedService = ServiceFactory.find($stateParams.slug);
}]);
'use strict';

angular.module('service.factory', []).factory('ServiceFactory', function () {
  var services = [
  // {
  //   name: 'e-Design',
  //   logo: 'img/icons/construction.png'
  // },
  {
    name: 'Space Planning',
    slug: 'space-planning',
    logo: 'img/icons/house-plan.png',
    banner: 'img/services/floor-plan.png',
    subHead: 'creating individualized products',
    desc: "What is it? Do you feel like your space is not functional? Would you like assistance arranging a layout for your space? We can help!\n \nWe will organize your existing furniture in a way that creates a more natural and functional flow to make the best use of your space."
  }, {
    name: 'Branding',
    slug: 'branding',
    logo: 'img/icons/branding.png',
    banner: 'img/services/branding.jpg',
    subHead: 'Helping your customers get to know you',
    desc: "It is important to be able to stand out from the rest of the designers in your area.  By creating branding tools that potential clients or architects can get their hands on moves you to the front of the line.\n \nWe develop these business tools, such as portfolio booklets and business cards to reach your specific audience."
  }, {
    name: 'Interior Design',
    slug: 'interior-design',
    logo: 'img/icons/think-draw-build.png',
    banner: 'img/services/master-br.png',
    subHead: 'creating individualized products',
    desc: "If you are local to the Seattle area, we are here to assist you in your design needs.  We want you to feel at home in your home.  It is very important for us to get to know you and your style.  We will then be able to develop a design that is a reflection of you.\n \nThis is a more traditional form of design.  We will get to know you further by meeting and discussing your design needs and desires.  A design package with concepts will be created all the way through installation."
  }, {
    name: 'Furniture Design',
    slug: 'furniture',
    logo: 'img/icons/construction.png',
    banner: 'img/services/bench.png',
    subHead: 'creating individualized products',
    desc: "We love producing industrial, rustic and sustainable pieces.  These can be brand new pieces or repurposed furniture.  Breathing new life into second hand furniture is not only rewarding, but also helps to keep furniture from uselessly going to the trash.\n \nIf there were a certain piece of furniture you are looking for, we would love to be part of the process to create that perfect piece for you."
  }];

  return {
    list: function list() {
      return services;
    },
    find: function find(slug) {
      return _.find(services, function (service) {
        return service.slug == slug;
      });
    }
  };
});
'use strict';

angular.module('services', ['service.controller', 'service.detail.controller', 'service.factory']);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
